{"version":3,"sources":["components/week1/sync-bar.js","components/week1/index.js","App.js","serviceWorker.js","index.js","assets/shopping-cart-gif.gif","assets/blob.png"],"names":["ProgressBar","props","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","transition","boxShadow","style","margin","padding","color","fontWeight","OuterWrapper","styled","div","StyledWrapper","StyledHeader","h1","StyledParagraph","p","Week1","useState","progress","setProgress","React","useEffect","timer","setInterval","oldProgress","Math","min","clearInterval","className","src","blob","alt","shoppingCart","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"sTAuCiBA,EArCG,SAACC,GAAW,IACpBC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,UAWXC,EAAe,CACnBC,OAAQ,OACRC,MAAM,GAAD,OAAKH,EAAL,KACLI,gBAAiBL,EACjBM,aAAc,UACdC,UAAW,QACXC,WAAY,0BACZC,UAAW,mCASb,OACE,yBAAKC,MA1BiB,CACtBP,OAAQ,GACRC,MAAO,OACPC,gBAAiB,UACjBC,aAAc,GACdK,OAAQ,OACRF,UAAW,oCAqBT,yBAAKC,MAAOR,GACV,0BAAMQ,MATQ,CAClBE,QAAS,EACTC,MAAO,QACPC,WAAY,SAMR,UAA8Bb,EAA9B,S,+3BC3BV,IAAMc,EAAeC,IAAOC,IAAV,KASZC,EAAgBF,IAAOC,IAAV,KAUbE,EAAeH,IAAOI,GAAV,KASZC,EAAkBL,IAAOM,EAAV,KAwCNC,MA9Bf,WAAkB,IAAD,EACmBC,mBAAS,GAD5B,mBACNC,EADM,KACIC,EADJ,KAgBjB,OAdIC,IAAMC,WAAU,WACd,IAAMC,EAAQC,aAAY,WACxBJ,GAAY,SAAAK,GACV,OAAoB,MAAhBA,EACK,IAEFC,KAAKC,IAAIF,EAAc,EAAG,UAElC,KACL,OAAO,WACHG,cAAcL,MAEf,IAGH,kBAACd,EAAD,KACI,yBAAKoB,UAAU,OAAOC,IAAKC,IAAMC,IAAI,SACrC,kBAACpB,EAAD,KACQ,yBAAKiB,UAAU,aAAaC,IAAKG,IAAcD,IAAI,KACnD,kBAACnB,EAAD,uBACA,kBAACE,EAAD,oCACA,kBAAC,EAAD,CAAarB,QAAS,UAAWC,UAAWwB,OCtD7Ce,G,MAPH,kBACV,6BACE,kBAAC,EAAD,SCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,+C,kBCA3CD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.7b07b205.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ProgressBar = (props) => {\n    const { bgcolor, completed } = props;\n  \n    const containerStyles = {\n      height: 20,\n      width: '100%',\n      backgroundColor: \"#a3b7ca\",\n      borderRadius: 50,\n      margin: 'auto',\n      boxShadow: '1px 1px 2px 1px rgba(0,0,0,0.3)',\n    }\n  \n    const fillerStyles = {\n      height: '100%',\n      width: `${completed}%`,\n      backgroundColor: bgcolor,\n      borderRadius: 'inherit',\n      textAlign: 'right',\n      transition: 'width 0.75s ease-in-out',\n      boxShadow: '3px 0px 2px 0px rgba(0,0,0,0.3)',\n    }\n  \n    const labelStyles = {\n      padding: 5,\n      color: 'white',\n      fontWeight: 'bold'\n    }\n  \n    return (\n      <div style={containerStyles}>\n        <div style={fillerStyles}>\n          <span style={labelStyles}>{`${completed}%`}</span>\n        </div>\n      </div>\n    );\n  };\n  \n  export default ProgressBar;","import React, { useState, useEffect } from \"react\";\nimport shoppingCart from \"./../../assets/shopping-cart-gif.gif\";\nimport blob from './../../assets/blob.png';\nimport styled from 'styled-components';\nimport ProgressBar from './sync-bar'\n\nconst OuterWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background: #e4ecf8;\n`;\n\nconst StyledWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    height: 50vh;\n    width: 30vh;\n    margin:0 auto;\n    z-index: 10000;\n`;\n\nconst StyledHeader = styled.h1`\n    text-align: center;\n    color: #000000;\n    font-size: 20px;\n    z-index: 10000;\n    font-family: 'Montserrat', sans-serif;\n    padding-top:100px\n`;\n\nconst StyledParagraph = styled.p`\n    text-align: center;\n    color: #000000;\n    font-size: 16px;\n    margin-top: -10px;\n    z-index: 10000;\n    font-family: 'Montserrat', sans-serif;\n`;\n  \n\nfunction Week1() {\n    const [progress, setProgress] = useState(0);\n    React.useEffect(() => {\n      const timer = setInterval(() => {\n        setProgress(oldProgress => {\n          if (oldProgress === 100) {\n            return 100;\n          }\n          return Math.min(oldProgress + 5, 100);\n        });\n      }, 400);\n    return () => {\n        clearInterval(timer);\n      };\n    }, []);\n\nreturn (\n    <OuterWrapper>\n        <img className=\"blob\" src={blob} alt=\"blob\"/>\n        <StyledWrapper>\n                <img className=\"splash-img\" src={shoppingCart} alt=\"\" />\n                <StyledHeader>Hang in there!</StyledHeader>\n                <StyledParagraph>We are loading the products</StyledParagraph>\n                <ProgressBar bgcolor={\"#6c63fe\"} completed={progress} />\n        </StyledWrapper>\n    </OuterWrapper>\n);\n}\n\n\nexport default Week1;","import React, { useState, useEffect } from \"react\";\nimport Week1 from './components/week1';\nimport css from './App.css';\n\n\n\nconst App = () => (\n  <div>\n    <Week1></Week1>\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/shopping-cart-gif.d8e648cf.gif\";","module.exports = __webpack_public_path__ + \"static/media/blob.7c0104c7.png\";"],"sourceRoot":""}